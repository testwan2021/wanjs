1.dubbo是什么？
是一个面向接口远程调用，负载均衡，容错，服务发现和注册的一个分布式框架，目标：提升性能和SOA（面向服务架构）服务治理
2.rpc是什么？
远程接口调用，比如A机器上调用B机器上的服务，http可以实现，但是效率没有rpc好。
流程：消费者发起调用->消费进行参数方法体封装->找到地址发送-服务端解析->查询本地接口数据打包-消费者解析-拿到结果
3.为何用dubbo？
在面向服务架构SOA中，主要分为服务层和表示层，（服务层计算业务逻辑） 表现层（处理页面交互参数） 角色有：提供者 和消费者
在http交互过程通讯效率和功能单一，dubbo具备负载均衡,服务降级，服务在长期的压力下可以服务治理。
4.分布式？
把一个整体的项目，按照业务规则，拆分出很多个子系统，分别部署在不同的机器上，避免了单机上的性能和不满足高并发场景。
5.为何用分布式？
将业务拆分，方便业务拓展和维护，各个团队直接可以独立维护
便于提高性能
6.dubbo组成？
服务运行容器（启动加载，运行服务提供者）
提供者（把自己的服务注册到zk）
消费者(启动向zk订阅自己需要的服务，并在负载均衡的算法下，进行服务选择)
服务注册中心（维护一个可用列表）
监控中心
7.负载均衡方式：
默认权重随机 ，轮询，一致性hash，最少活跃调用数
8.zk宕机与dubbo情况
即使zk宕机，一段时间还是可以提供调用者提供服务，用的是本地的缓存服务，dubbo的健壮性：
zk宕机不影响dubbo使用
数据库挂，zk能提供服务，但是不能注册新服务。
zk集群任意一个挂，都会自动切换到另一台
9.dubbo和springcloud区别
dubbo底层协议是tcp，配合序列化rpc通讯
springcloud是一种http的rest风格，rest更加灵活，拥有强大的微服务下的各种组件。
10.dubbo超时
有2种设置方法，提供者设置超时，消费者设置超时（以消费者的超时时间优先），dubbo调用服务不成功，默认2次重试。
11.dubbo使用设计模式
工厂模式 装饰器模式  动态代理模式 观察者模式
12.dubbo目前不支持分布式事务
13.dubbo可以对结果进行缓存，dubbo必须依赖JDK

