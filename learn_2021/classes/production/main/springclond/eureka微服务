1.什么是微服务？
微服务架构是一种架构模式，就是将单一应用拆分一些小的服务，每个服务运行在自己的进程中，服务之间互相调用和协调，完成一个功能业务。
采用通讯机制：http  restful 风格 ,尽量避免了统一的 集中的管理模式，业务之间的开发可以选择对应的技术语言，数据库等底层

2.微服务优缺点？
优点：
1.每个服务应用可以是单一的业务组件，服务业务解耦，足够内聚
2.开发简单，一个人单一做一个事情
3.松耦合
4.便于维护
5.可以选择不同的语言和数据库来开发

缺点：
1.开发人员要处理分布式的复杂性
2.服务运维难度加大
3.系统部署有依赖
4.数据一致性问题
5.需要系统集成测试和性能监控等

3.eureka原理
1.用于定位服务，服务发现和服务剔除转移故障，类似zookeeper
Netflix Eurek是一个RESTful服务，它由Eureka服务器和Eureka客户端组成，前者用作服务注册服务器，后者是java客户端，简化与服务器的交互，同时负载均衡。
eureka  server:每个服务提供者启动会向server进行注册，可以通过界面的形式查看
eureka  client :是Java客户端，也自带了轮询的负载算法，在应用启动后，心跳默认30s,在3个周期某个节点没消息后，会把server列表进行移除
角色：
1.eureka server服务注册与发现
服务提供者
服务消费者
4.eureka的自我保护模式？
默认情况是在90秒3个周期没有接受到某个节点的心跳请求，eureka就会注销这个节点。但是在网络故障时候，微服务与eureka无法通讯，就不能盲目去删除节点，因为此刻微服务是健康的。就有了eureka自我保护，当eureka 与很多节点 都失去了通讯，可能是网络分区故障，就会自我保护，不会去注销节点，防止盲目删除健康节点，一句话 好死不如赖活着。
通过一个属性配置enable-self-preservation=false禁止使用自我保护

5.eureka与zookeeper对比？
cap理论，c 一致性 a 可用性 p 分区容错（在网络故障时可用）
zookeeper 是保持cp   ,eureka是ap
zookeeper，master与其他节点故障时候，重新选举过程会导致30-120s不可用，在实际生产中，在服务注册列表中可用性比一致性更重要
eureka 每个节点都是平等，任意节点宕机，其他节点依旧可用提供服务